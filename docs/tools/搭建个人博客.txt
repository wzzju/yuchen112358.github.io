## 利用Github和Jekyll搭建自己的博客

最近，由于本人在学习过程中深感需要做一些笔记，毕竟好记性不如烂笔头嘛。将学习笔记发布成博客以备日后复习所需，为此，我需要搭建自己的博客，相比于CSDN、博客园等，利用github和jekyll搭建博客更具挑战性，且可定制性强。  
从网上搜了许多资料，但是感觉很多讲解的都不完整，毕竟我对github之前了解也不是很多。结合hzmook和阮一峰的博客，花费我近一天的时间，终于完成了博客的搭建，期间遇到许多问题，但是没人讲解，且网上资料众说纷纭，到最后只能自己慢慢摸索。为此，将搭建过程详细记录如下：  

##### 首先 ，

你要拥有github账号，且安装好git，并进行配置，配置过程如下：  
1.设置本地机器默认commit的昵称与Email.，请使用有意义的名字与email：

```
git config --global user.name "example"  
git config --global user.email "example@gmail.com"  
git config --global push.default simple  
```

2.查看git配置可以使用 -l 参数:

	git config -l
	

3.也可以在某个项目根路径下面可以设置单独的Email与姓名，只需要去掉--global 参数即可，如下：

```
git config user.name "example"  
git config user.email "example@gmail.com"
```

##### 然后 ，

创建自己的 Blog 仓库 username(请确保跟你的账号名相同).github.com:

	$ mkdir username.github.io
	$ cd username.github.io
	
##### 接着 ，
新建一个 index.html 文件，示例如下：

```
 1 <!DOCTYPE HTML>
 2 <html>
 3 <head>
 4 <title>Hello</title>
 5 </head>
 6 
 7 <body>
 8 <h1>Hello!</h1>
 9 </body>
10 </html>
```

##### 最后 ，

初始化仓库，前往github的网站，在github网站上创建一个名为username.github.io的库，提交并push到Github:

```
$ git init
$ git add -A
$ git commit -a -m 'init commit.'
$ git remote add origin https://github.com/username/username.github.io.git
$ git push origin master
```

现在，打开username.github.io(注意不是username.github.io)，就可以看到刚才创建的页面了。
接下来我们只需要按照自己的喜好设计页面。下面，让我们认识下Jekyll的文件及目录配置:

```
  |-- _config.yml
  |-- _includes
  |-- _layouts
  |   |-- default.html
  |   `-- post.html
  |-- _plugins
  |-- _posts
  |   |-- yyyy-mm-dd-title.markdown
  |   `-- yyyy-mm-dd-title.markdown
  |-- _site
  `-- index.html
```

###### _config.yml

保存Jekyll配置的文件。虽然绝大部分选项可以通过命令行参数指定，但将它们写入配置文件可以使你在每次执行时不必记住它们。

###### _includes

该目录存放可以与layouts和posts混合、匹配并重用的文件。Liquid标签{% include file.ext %}可以用于嵌入文件_includes/file.ext。

###### _layouts

该目录存放用来插入帖子的网页布局模板。页面布局基于类似博客平台的“一个帖子接一个帖子”的原则，通过YAML前置数据定义。Liquid标签用于在页面上插入帖子的文本内容。

###### _plugins

可以增加你自己的插件。

###### _posts

该目录下存放的可以说成是你的“动态内容”。这些文件的格式很重要，它们的文件命名一定要遵循 yyyy-mm-dd-title.html|markdown|textile 规则。每一个帖子的固定链接URL可以作弹性的调整，但帖子的发布日期和转换所使用的标记语言会根据且仅根据文件名中的相应部分来识别。

###### _site

Jekyll自动生成的，所以可以忽略，如果你有在本地安装Jekyll并预览了的话，可以使用.gitignore设置Git停止对本目录的跟踪。

###### index.html 和所有的 HTML/Markdown/Textile 文件

所有的HTML/Markdown/Textile文件都可以包含 YAML 配置，这类文件都会被Jekyll解析。  
以上内容，摘自[hzmook的博客](http://hzmook.github.io/2012/07/01/use-jekyll-build-blog-on-github.html)。下面根据[阮一峰的网络日志](http://www.ruanyifeng.com/blog/2012/08/blogging_with_jekyll.html)在自己的仓库中配置好你自己的目录及文件:

##### 1.创建设置文件

在项目根目录(即 username.github.io)下，建立一个名为_config.yml的文本文件。它是jekyll的设置文件，我们在里面填入如下内容，其他设置都可以用默认选项：

```
$ cd username.github.io
& touch _config.yml
按这里的方法，在_config.yml中应该什么也不写(也可以写入markdown: kramdown),在阮一峰的博客里写的内容是baseurl: /jekyll_demo ，但是在本方法中baseurl就是主页根目录，故不需要填写，默认即可。
```

目录结构变成：

```
/username.github.io
　　　　|--　_config.yml
```

##### 2.创建模板文件

在项目根目录下，创建一个_layouts目录，用于存放模板文件。
	$ mkdir _layouts
进入该目录，创建一个default.html文件，作为Blog的默认模板。并在该文件中填入以下内容。

```
<!DOCTYPE html>

<html>

  <head>

     <meta http-equiv="content-type" content="text/html; charset=utf-8" />

     <title>{{ page.title }}</title>

  </head>

  <body>
 
  {{ content }}
  
  </body>

</html>
```

Jekyll使用Liquid模板语言，{{ page.title }}表示文章标题，{{ content }}表示文章内容，更多模板变量请参考[官方文档](https://github.com/jekyll/jekyll/wiki/Template-Data)。
目录结构变成：

```
/username.github.io
　　　　|--　_config.yml
　　　　|--　_layouts
　　　　|　　　|--　default.html
```

##### 3.创建文章

回到项目根目录，创建一个_posts目录，用于存放blog文章。
	$ mkdir _posts
进入该目录，创建第一篇文章。文章就是普通的文本文件，文件名假定为2012-08-25-hello-world.html。(注意，文件名必须为"年-月-日-文章标题.后缀名"的格式。如果网页代码采用html格式，后缀名为html；如果采用markdown格式，后缀名为md。）  
在该文件中，填入以下内容：（注意，行首不能有空格）

```
---
layout: default
title: 你好，世界
---

<h2>{{ page.title }}</h2>

<p>我的第一篇文章</p>

<p>{{ page.date | date_to_string }}</p>
```

每篇文章的头部，必须有一个yaml文件头，用来设置一些元数据。它用三根短划线"---"，标记开始和结束，里面每一行设置一种元数据。"layout:default"，表示该文章的模板使用_layouts目录下的default.html文件；"title: 你好，世界"，表示该文章的标题是"你好，世界"，如果不设置这个值，默认使用嵌入文件名的标题，即"hello world"。  
在yaml文件头后面，就是文章的正式内容，里面可以使用模板变量。`{{ page.title }}`就是文件头中设置的"你好，世界"，`{{ page.date }}`则是嵌入文件名的日期（也可以在文件头重新定义date变量），"| date_to_string"表示将page.date变量转化成人类可读的格式。  
目录结构变成：

```
/username.github.io
　　　　|--　_config.yml
　　　　|--　_layouts
　　　　|　　　|--　default.html
　　　　|--　_posts
　　　　|　　　|--　2012-08-25-hello-world.html
```

##### 4.更新首页

回到根目录，更新index.html文件内容，如下：

```
---
layout: default
title: 我的Blog
---

<h2>{{ page.title }}</h2>

<p>最新文章</p>

<ul>
    {% for post in site.posts %}
      <li>{{ post.date | date_to_string }} <a href="{{ site.baseurl }}{{ post.url }}">{{ post.title }}</a></li>
    {% endfor %}
</ul>
```

它的Yaml文件头表示，首页使用default模板，标题为"我的Blog"。然后，首页使用了`{% for post in site.posts %}`，表示对所有帖子进行一个遍历。这里要注意的是，Liquid模板语言规定，输出内容使用两层大括号，单纯的命令使用一层大括号。至于`{{site.baseurl}}`就是_config.yml中设置的baseurl变量。   
目录结构变成：

```
　/username.github.io
　　　　|--　_config.yml
　　　　|--　_layouts
　　　　|　　　|--　default.html
　　　　|--　_posts
　　　　|　　　|--　2012-08-25-hello-world.html
　　　　|--　index.html
```

##### 5.发布更新的内容
更新Blog内容的命令如下：

```
git add -A    
git commit -m "begin blogs."         
git push origin master   
```

##### 6.使本地代码仓库与gihub上保持一致

有时候，我们可能会在两台电脑上发布博客，这时，我们需要从gihthub上pull到本地，保持本地与github网上同步，命令如下：

	git pull origin master

##### 7.访问自己的博客

每次上传成功之后，访问username.github.io就可以看到自己更新的博客了，如有需要请刷新页面。

##### 8.关于写博客

可以使用Haroopad书写Markdown，然后导出成html文件，并将html文件放在_posts目录下即可，然后使用步骤5中的命令发布新增的博客。

##### 参考文献

* [hzmook的博客](http://hzmook.github.io/2012/07/01/use-jekyll-build-blog-on-github.html)
* [阮一峰的网络日志](http://www.ruanyifeng.com/blog/2012/08/blogging_with_jekyll.html)
* [如何SHH key给GITHUB](http://jingyan.baidu.com/article/a65957f4f0acc624e67f9bc1.html)
